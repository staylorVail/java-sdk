package com.vailsys.persephony.api.phoneNumber;

import com.google.gson.JsonSyntaxException;
import com.vailsys.persephony.api.APIAccountRequester;
import com.vailsys.persephony.api.PersyException;
import com.vailsys.persephony.api.PersyJSONException;

import java.util.HashMap;

import static com.vailsys.persephony.json.PersyGson.gson;

/**
 * This class represents the set of wrappers around the Persephony IncomingPhoneNumbers API
 * It provides methods to handle all the operations supported by the Persephony IncomingPhoneNumbers API.
 */
public class IncomingPhoneNumberRequester extends APIAccountRequester {
    private static final String pathHead = "IncomingPhoneNumbers";
    /** The default path for the IncomingPhoneNumbers endpoint. */
    private final String path;
    /** The accountId for the acting account. */
    private final String actingAccountId;

    /**
     * Creates an IncomingPhoneNumberRequester. For most SDK users IncomingPhoneNumberRequesters will be
     * created automatically by the {@link com.vailsys.persephony.api.PersyClient}
     * but is available for more advanced users who only require the features
     * in this specific requester and not the rest of the features of the
     * {@link com.vailsys.persephony.api.PersyClient}.
     *
     * @param credAccountId   The accountId to use as authentication credentials
     * in the HTTP Basic Auth header for requests made by this requester.
     * @param credAuthToken   The authToken to use as authentication credentials
     * in the HTTP Basic Auth header for requests made by this requester.
     * @param actingAccountId The accountId to act as. This can be the same as
     * {@code credAccountId} or the accountId of a subaccount of the {@code credAccountId}.
     */
    public IncomingPhoneNumberRequester(String credAccountId, String credAuthToken, String actingAccountId) throws PersyException {
        super(credAccountId, credAuthToken);
        this.actingAccountId = actingAccountId;
        this.path = APIAccountRequester.constructPath(APIAccountRequester.rootPath, this.actingAccountId, this.pathHead);
    }

    /**
     * Retrieve the {@code path} value generated by the IncomingPhoneNumberRequester. This is
     * the URL path used in requests to Persephony.
     *
     * @return The {@code path}.
     */
    public String getPath() {
        return path;
    }

    private String getIncomingPhoneNumberPath(String incomingPhoneNumberId) { return APIAccountRequester.constructPath(this.getPath(), incomingPhoneNumberId);}

    /**
     * Retrieve the {@code actingAccountId}.
     *
     * @return The {@code actingAccountId}.
     */
    public String getActingAccountId() {
        return actingAccountId;
    }

    /**
     * Allows SDK developers to change which instance of the Persephony API that the IncomingPhoneNumberRequester points to.
     *
     * @param newUrl The new URL to use in place of the default APIRequester.PERSY_URL
     */
    protected void setPersyUrl(String newUrl) { super.setPersyUrl(newUrl);}


    /**
     * Retrieve a list of IncomingPhoneNumbers associated with the {@code actingAccountId}.
     * This wraps a HTTP GET request to the Persephony API's
     * /Accounts/$accountId/IncomingPhoneNumbers endpoint. This will retrieve all incoming phone numbers
     * for the acting account.
     *
     * @return An in-language representation of Persephony's paginated list
     * response. This will be a paginated list of incoming phone numbers as returned by
     * the Persephony API.
     */
    public IncomingPhoneNumberList get() throws PersyException{
        return new IncomingPhoneNumberList(this.getCredentialAccountId(), this.getCredentialAuthToken(), this.GET(this.getPath()));
    }

    /**
     *Retrieve a list of IncomingPhoneNumbers associated with the {@code actingAccountId}.
     * This wraps a HTTP GET request to the Persephony API's
     * /Accounts/$accountId/IncomingPhoneNumbers endpoint. This will retrieve all incoming phone numbers
     * for the acting account.
     *
     * @param filters an object containing a number of possible ways to filter the incoming phone numbers returned by Persephony.
     *
     * @see com.vailsys.persephony.api.phoneNumber.IncomingPhoneNumberSearchFilters
     * @return An in-language representation of Persephony's paginated list
     * response. This will be a paginated list of incoming phone numbers as returned by
     * the Persephony API.
     */
    public IncomingPhoneNumberList get(IncomingPhoneNumberSearchFilters filters) throws PersyException {
        HashMap<String, String> filtersMap;

        try {
            filtersMap = gson.fromJson(gson.toJson(filters), APIAccountRequester.GETMapType);
        } catch (JsonSyntaxException jse){
            throw new PersyJSONException(jse);
        }

        return new IncomingPhoneNumberList(this.getCredentialAccountId(), this.getCredentialAuthToken(), this.GET(this.getPath(), filtersMap));
    }

    /**
     * Create a new incoming phone number through the Persephony API.
     * This function wraps an HTTP POST request to the Persephony API's
     * /Account/$accountId/IncomingPhoneNumbers endpoint. This purchases a new incoming phone number under the {@code actingAccountId}'s account.
     *
     * @param options Optional arguments that can be provided when creating an Incoming Phone Number. See Persephony documentation for details.
     * @see com.vailsys.persephony.api.phoneNumber.IncomingPhoneNumberCreateOptions
     * @return The {@link com.vailsys.persephony.api.phoneNumber.IncomingPhoneNumber} object
     * returned by Persephony that represents the incoming phone number that was created.
     */
    public IncomingPhoneNumber create(IncomingPhoneNumberCreateOptions options) throws PersyException {
        return IncomingPhoneNumber.fromJson(this.POST(this.getPath(), gson.toJson(options)));
    }

    /**
     * Remove the incoming phone number with a matching {@code incomingPhoneNumberId} as an incoming number.
     * Persephony will no longer answer calls to the number.
     * This function wraps an HTTP DELETE request to the /Account/$accountId/IncomingPhoneNumbers/$incomingPhoneNumberId endpoint.
     *
     * @param incomingPhoneNumberId The id of the incoming phone number to delete.
     */
    public void delete(String incomingPhoneNumberId) throws PersyException {
        this.DELETE(this.getIncomingPhoneNumberPath(incomingPhoneNumberId));
    }

    /**
     * Retrieve a single incoming phone number from Persephony.
     *
     * @param incomingPhoneNumberId The {@code incomingPhoneNumberId} of the desired incoming phone number.
     * @return The incoming phone number matching the {@code incomingPhoneNumberId} provided.
     */
    public IncomingPhoneNumber get(String incomingPhoneNumberId) throws PersyException {
        return IncomingPhoneNumber.fromJson(this.GET(this.getIncomingPhoneNumberPath(incomingPhoneNumberId)));
    }

    /**
     * Update the existing incoming phone number associated with the {@code incomingPhoneNumberId}. This wraps an HTTP POST request to the Persephony API's /Accounts/$accountId/IncomingPhoneNumbers/$incomingPhoneNumberId endpoint.
     *
     * @param incomingPhoneNumberId The {@code incomingPhoneNumberId} of the desired incoming phone number.
     * @param options The {@code IncomingPhoneNumberUpdateOptions} to change in the target IncomingPhoneNumber.
     * @return The incoming phone number matching the {@code incomingPhoneNumberId} provided.
     */
    public IncomingPhoneNumber update(String incomingPhoneNumberId, IncomingPhoneNumberUpdateOptions options) throws PersyException {
        return IncomingPhoneNumber.fromJson(this.POST(this.getIncomingPhoneNumberPath(incomingPhoneNumberId), gson.toJson(options)));
    }
}
