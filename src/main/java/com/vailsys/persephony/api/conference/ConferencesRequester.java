package com.vailsys.persephony.api.conference;

import java.util.HashMap;

import com.vailsys.persephony.api.APIAccountRequester;
import com.vailsys.persephony.api.PersyException;
import com.vailsys.persephony.api.PersyJSONException;
import static com.vailsys.persephony.json.PersyGson.gson;

import com.google.gson.JsonSyntaxException;
import com.vailsys.persephony.api.conference.participant.ParticipantsRequester;

/**
 * This class represents the set of wrappers around the Persephony Conferences API.
 * It provides methods to handle all the operations supported by the Persephony
 * Conferences API.
 */
public class ConferencesRequester extends APIAccountRequester {
	private static final String pathHead = "Conferences";
	/** The default path for the Conferences endpoint. */
	private final String path;
	/** The accountId for the acting account. */
	private final String actingAccountId;

	/**
	 * Creates a ConferencesRequester. For most SDK users ConferencesRequesters will be
	 * created automatically by the {@link com.vailsys.persephony.api.PersyClient}
	 * but is available for more advanced users who only require the features
	 * in this specific requester and not the rest of the features of the
	 * {@link com.vailsys.persephony.api.PersyClient}.
	 *
	 * @param credAccountId   The accountId to use as authentication credentials
	 * in the HTTP Basic Auth header for requests made by this requester.
	 * @param credAuthToken   The authToken to use as authentication credentials
	 * in the HTTP Basic Auth header for requests made by this requester.
	 * @param actingAccountId The accountId to act as. This can be the same as
	 * {@code credAccountId} or the accountId of a subaccount of the {@code credAccountId}.
	 */
	public ConferencesRequester(String credAccountId, String credAuthToken, String actingAccountId) throws PersyException {
		super(credAccountId, credAuthToken);
		this.actingAccountId = actingAccountId;
		this.path = APIAccountRequester.constructPath(APIAccountRequester.rootPath,this.actingAccountId, pathHead);
	}

	/**
	 * Retrieve the {@code actingAccountId}.
	 *
	 * @return The {@code actingAccountId}.
	 */
	public String getActingAccountId() {
		return this.actingAccountId;
	}

	/**
	 * Retrieve the {@code path} value generated by the ConferencesRequester. This is
	 * the URL path used in requests to Persephony.
	 *
	 * @return The {@code path}.
	 */
	public String getPath() {
		return this.path;
	}

	private String getConferencePath(String conferenceId) { 
		return APIAccountRequester.constructPath(this.getPath(), conferenceId);
	}

	/**
	 * Allows SDK developers to change which instance of the Persephony API that the ConferencesRequester points to.
	 *
	 * @param newUrl The new URL to use in place of the default APIRequester.PERSY_URL
	 */
	protected void setPersyUrl(String newUrl) {
		super.setPersyUrl(newUrl);
	}

	/**
	 * Retrieve a list of Conferences associated with the {@code actingAccountId}.
	 * This wraps a HTTP GET request to the Persephony API's
	 * /Accounts/$accountId/Conferences endpoint. This will retrieve all conferences
	 * for the acting account.
	 *
	 * @return An in-language representation of Persephony's paginated list
	 * response. This will be a paginated list of conferences as returned by
	 * the Persephony API.
	 */
	public ConferenceList get() throws PersyException {
		return new ConferenceList(this.getCredentialAccountId(), this.getCredentialAuthToken(), this.GET(this.getPath()));
	}

	/**
	 * Retrieve a list of conferences associated with the {@code actingAccountId}.
	 * This wraps a HTTP GET request to the Persephony API's
	 * /Accounts/$accountId/Conferences endpoint. This will retrieve all conferences for
	 * the acting account.
	 *
	 * @param filters an object containing a number of possible ways to filter
	 * the conferences returned by Persephony.
	 *
	 * @return An in-language representation of Persephony's paginated list
	 * response. This will be a paginated list of conferences as returned by
	 * the Persephony API.
	 *
	 * @see com.vailsys.persephony.api.conference.ConferencesSearchFilters
	 */
	public ConferenceList get(ConferencesSearchFilters filters) throws PersyException { 
		HashMap<String,String> filtersMap;

		try {
			filtersMap = gson.fromJson(gson.toJson(filters), APIAccountRequester.GETMapType);
		} catch (JsonSyntaxException jse) {
			throw new PersyJSONException(jse);
		}

		return new ConferenceList(this.getCredentialAccountId(), this.getCredentialAuthToken(), this.GET(this.getPath(), filtersMap));
	}

	/**
	 * Retrieve a single conference from Persephony.
	 *
	 * @param conferenceId The {@code conferenceId} of the desired conference.
	 *
	 * @return The conference matching the {@code conferenceId} provided.
	 */
	public Conference get(String conferenceId) throws PersyException {
		return Conference.fromJson(this.GET(this.getConferencePath(conferenceId)));
	}

	/**
	 * Update the existing conference associated with the {@code conferenceId}.
	 * This wraps an HTTP POST request to the Persephony API's
	 * /Accounts/$accountId/Conferences/$conferenceId endpoint.
	 *
	 * @param conferenceId The {@code conferenceId} of the desired conference.
	 *
	 * @param options The {@code ConferenceUpdateOptions} to change in the target conference.
	 * @see com.vailsys.persephony.api.conference.ConferenceUpdateOptions
	 *
	 * @return The conference matching the {@code conferenceId} provided.
	 */
	public Conference update(String conferenceId, ConferenceUpdateOptions options) throws PersyException {
		return Conference.fromJson(this.POST(this.getConferencePath(conferenceId), gson.toJson(options)));
	}

	/**
	 * Create a new conference through the Persephony API.
	 * This function wraps an HTTP POST request to the Persephony API's
	 * /Account/$accountId/Conferences endpoint. This creates a new conference
	 * from the {@code actingAccountId}'s account.
	 *
	 * @param options Optional arguments that can be provided when creating a conference. See Persephony documentation for details.
	 * @see com.vailsys.persephony.api.conference.ConferenceCreateOptions
	 * @return The {@link com.vailsys.persephony.api.conference.Conference} object
	 * returned by Persephony that represents the conference that was created.
	 */
	public Conference create(ConferenceCreateOptions options) throws PersyException {
		return Conference.fromJson(this.POST(this.getPath(), gson.toJson(options)));
	}

	/**
	 * Create a new conference through the Persephony API.
	 * This function wraps an HTTP POST request to the Persephony API's
	 * /Account/$accountId/Conferences endpoint. This creates a new conference
	 * from the {@code actingAccountId}'s account.
	 *
	 * @return The {@link com.vailsys.persephony.api.conference.Conference} object
	 * returned by Persephony that represents the conference that was created.
	 */
	public Conference create() throws PersyException {
		return Conference.fromJson(this.POST(this.getPath(), null));
	}

	/**
	 * Creates a {@link com.vailsys.persephony.api.conference.participant.ParticipantsRequester} bound to a specific conference.
	 *
	 * @param conferenceId The {@code conferenceId} to bind the ParticipantsRequester to.
	 * @return The {@code ParticipantsRequester} that was created.
	 */
	public ParticipantsRequester getParticipantsRequester(String conferenceId) throws PersyException {
		return new ParticipantsRequester(super.getCredentialAccountId(), super.getCredentialAuthToken(), this.getActingAccountId(), this.getConferencePath(conferenceId));
	}
}
