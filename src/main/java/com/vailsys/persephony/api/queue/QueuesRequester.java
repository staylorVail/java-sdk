package com.vailsys.persephony.api.queue;

import com.google.gson.JsonSyntaxException;
import com.vailsys.persephony.api.APIAccountRequester;
import com.vailsys.persephony.api.PersyException;
import com.vailsys.persephony.api.PersyJSONException;
import com.vailsys.persephony.api.queue.member.MembersRequester;
import com.vailsys.persephony.log.Level;
import com.vailsys.persephony.log.LogWriter;

import java.util.HashMap;

import static com.vailsys.persephony.json.PersyGson.gson;

/**
 * This class represents the set of wrappers around the Persephony Queues API.
 * It provides methods to handle all the operations supported by the Persephony Queues API.
 */
public class QueuesRequester extends APIAccountRequester {
    private static final String pathHead = "Queues";
    /** The default path for the Queues endpoint. */
    private final String path;
    /** The accountId for the acting account. */
    private final String actingAccountId;

    /**
     * Creates a QueuesRequester with custom logging settings. For most SDK users QueuesRequesters will be created automatically by the {@link com.vailsys.persephony.api.PersyClient} but is available for more advanced users who only require the features in this specific requester and not the rest of the features of the {@link com.vailsys.persephony.api.PersyClient}.
     *
     * @param credAccountId The accountId to use as authentication credentials
     * in the HTTP Basic Auth header for requests made by this requester.
     * @param credAuthToken The authToken to use as authentication credentials
     * in the HTTP Basic Auth header for requests made by this requester.
     * @param actingAccountId The accountId to act as. This can be the same as
     * {@code credAccountId} or the accountId of a subaccount of the {@code credAccountId}.
     * @param writer The log writer to use.
     */
    public QueuesRequester(String credAccountId, String credAuthToken, String actingAccountId, LogWriter writer) throws PersyException {
        super(credAccountId, credAuthToken, writer);
        this.actingAccountId = actingAccountId;
        this.path = APIAccountRequester.constructPath(APIAccountRequester.rootPath, this.actingAccountId, pathHead);
    }

    /**
     * Creates a QueuesRequester. For most SDK users QueuesRequesters will be created automatically by the {@link com.vailsys.persephony.api.PersyClient} but is available for more advanced users who only require the features in this specific requester and not the rest of the features of the {@link com.vailsys.persephony.api.PersyClient}.
     *
     * @param credAccountId The accountId to use as authentication credentials
     * in the HTTP Basic Auth header for requests made by this requester.
     * @param credAuthToken The authToken to use as authentication credentials
     * in the HTTP Basic Auth header for requests made by this requester.
     * @param actingAccountId The accountId to act as. This can be the same as
     * {@code credAccountId} or the accountId of a subaccount of the {@code credAccountId}.
     */
    public QueuesRequester(String credAccountId, String credAuthToken, String actingAccountId) throws PersyException {
        super(credAccountId, credAuthToken);
        this.actingAccountId = actingAccountId;
        this.path = APIAccountRequester.constructPath(APIAccountRequester.rootPath, this.actingAccountId, pathHead);
    }

    /**
     * Retrieve the @{code actingAccountId}.
     *
     * @return The {@code actingAccountId}.
     */
    public String getActingAccountId() { return this.actingAccountId; }

    /**
     * Retrieve the {@code path} value generated by the QueuesRequester. This is
     * the URL path used in requests to Persephony.
     *
     * @return The {@code path}.
     */
    public String getPath() {return this.path;}

    private String getQueuePath(String queueId){
        return APIAccountRequester.constructPath(this.getPath(), queueId);
    }

    /**
     * Allows SDK developers to change which instance of the Persephony API that the QueuesRequester points to.
     *
     * @param newUrl The new URL to use in place of the default APIAccountRequester.PERSY_URL
     */
    protected void setPersyUrl(String newUrl) { super.setPersyUrl(newUrl);}

    /**
     * Retrieve a list of Queues associated with the {@code actingAccountId}.
     * This wraps a HTTP GET request to the Persephony API's
     * /Accounts/$accountId/Queues endpoint. This will retrieve all queues
     * for the acting account.
     *
     * @return An in-language representation of Persephony's paginated list
     * response. This will be a paginated list of queues as returned by
     * the Persephony API.
     */
    public QueueList get() throws PersyException{
        return new QueueList(this.getCredentialAccountId(), this.getCredentialAuthToken(), this.GET(this.getPath()));
    }

    /**
     * Retrieve a list of queues associated with the {@code actingAccountId}.
     * This wraps a HTTP GET request to the Persephony API's
     * /Accounts/$accountId/Queues endpoint. This will retrieve all queues for
     * the acting account.
     *
     * @param filters an object containing a number of possible ways to filter
     * the queues returned by Persephony.
     *
     * @return An in-language representation of Persephony's paginated list
     * response. This will be a paginated list of queues as returned by
     * the Persephony API.
     *
     * @see com.vailsys.persephony.api.queue.QueuesSearchFilters
     */
    public QueueList get(QueuesSearchFilters filters) throws PersyException {
        HashMap<String, String> filtersMap;
        try {
            filtersMap = gson.fromJson(gson.toJson(filters), APIAccountRequester.GETMapType);
        } catch (JsonSyntaxException jse){
            throw new PersyJSONException(jse);
        }

        return new QueueList(this.getCredentialAccountId(), this.getCredentialAuthToken(), this.GET(this.getPath(), filtersMap));
    }

    /**
     * Retrieve a single queue from Persephony,
     *
     * @param queueId The {@code queueId} of the desired queue.
     *
     * @return The queue matching the {@code queueId} provided.
     */
    public Queue get(String queueId) throws PersyException {
        return Queue.fromJson(this.GET(this.getQueuePath(queueId)));
    }

    /**
     * Update the existing queue associated with the {@code queueId}.
     * This wraps an HTTP POST request to the Persephony API's
     * /Accounts/$accountId/Queues/$queueId endpoint.
     *
     * @param queueId The {@code queueId} of the desired queue.
     * @param options The {@code QueueUpdateOptions} to change in the target queue.
     * @see com.vailsys.persephony.api.queue.QueueUpdateOptions
     *
     * @return The queue matching the {@code queueId} provided.
     */
    public Queue update(String queueId, QueueUpdateOptions options) throws PersyException {
        return Queue.fromJson(this.POST(this.getQueuePath(queueId), gson.toJson(options)));
    }

    /**
     * Create a new queue through the Persephony API.
     * This function wraps an HTTP POST request to the Persephony API's
     * /Account/$accounId/Queues endpoint. This creates a new queue
     * from the {@code actingAccountId}'s account.
     *
     * @return The {@link com.vailsys.persephony.api.queue.Queue} object
     * returned by Persephony that represents the queue that was created.
     */
    public Queue create() throws PersyException {
        return Queue.fromJson(this.POST(this.getPath(), null));
    }

    /**
     * Create a new queue through the Persephony API.
     * This function wraps an HTTP POST request to the Persephony API's
     * /Account/$accounId/Queues endpoint. This creates a new queue
     * from the {@code actingAccountId}'s account.
     *
     * @param options Optional arguments that can be provided when creating a queue. See Persephony documentation for details.
     * @return The {@link com.vailsys.persephony.api.queue.Queue} object
     * returned by Persephony that represents the queue that was created.
     * @see com.vailsys.persephony.api.queue.QueueCreateOptions
     */
    public Queue create(QueueCreateOptions options) throws PersyException {
        return Queue.fromJson(this.POST(this.getPath(), gson.toJson(options)));
    }

    /**
     * Creates a {@link com.vailsys.persephony.api.queue.member.MembersRequester} bound to a specific queue with custom logging options.
     *
     * @param queueId The {@code queueId} to bind the MembersRequester to.
     * @param writer The log writer to use.
     *
     * @return The {@code MembersRequester} that was created.
     */
    public MembersRequester getMembersRequester(String queueId, LogWriter writer) throws PersyException {
        return new MembersRequester(super.getCredentialAccountId(), super.getCredentialAuthToken(), this.getActingAccountId(), this.getQueuePath(queueId), writer);
    }

    /**
     * Creates a {@link com.vailsys.persephony.api.queue.member.MembersRequester} bound to a specific queue.
     *
     * @param queueId The {@code queueId} to bind the MembersRequester to.
     *
     * @return The {@code MembersRequester} that was created.
     */
    public MembersRequester getMembersRequester(String queueId) throws PersyException {
        return new MembersRequester(super.getCredentialAccountId(), super.getCredentialAuthToken(), this.getActingAccountId(), this.getQueuePath(queueId));
    }
}
