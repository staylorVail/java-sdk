package com.vailsys.persephony.api.log;

import com.vailsys.persephony.api.APIAccountRequester;
import com.vailsys.persephony.api.PersyException;

import static com.vailsys.persephony.json.PersyGson.gson;

/**
 * This class represents the set of wrappers around the Persephony Logs API.
 * It provides methods to handle all the operations supported by the Persephony Logs API.
 */
public class LogRequester extends APIAccountRequester {
    private static final String pathHead = "Logs";
    /** The default path for the Logs endpoint. */
    private final String path;
    /** The accountId for the acting account. */
    private final String actingAccountId;

    /**
     * Creates a LogRequester. For most SDK users LogRequesters will be
     * created automatically by the {@link com.vailsys.persephony.api.PersyClient}
     * but is available for more advanced users who only require the features in this specific requester and not the rest of the features of the {@link com.vailsys.persephony.api.PersyClient}
     *
     * @param credAccountId The accountId to use as authentication credentials in the HTTP Basic Auth header for requests made by this requester.
     * @param credAuthToken The authToken to use as authentication credentials in the HTTP Basic Auth header for requests made by this requester.
     * @param actingAccountId The accountId to act as. This can be the same as {@code credAccountId} or the accountId of a subaccount of the {@code credAccountId}
     */
    public LogRequester(String credAccountId, String credAuthToken, String actingAccountId) throws PersyException {
        super(credAccountId, credAuthToken);
        this.actingAccountId = actingAccountId;
        this.path = APIAccountRequester.constructPath(APIAccountRequester.rootPath, this.actingAccountId, this.pathHead);
    }

    /**
     *Retrieve the {@code path} value generated by the LogRequester.
     * This is the URL path used in requests to Persephony.
     *
     * @return The {@code path}
     */
    public String getPath() {
        return path;
    }

    /**
     * Retrieve the {@code actingAccountId}.
     *
     * @return The {@code actingAccountId}
     */
    public String getActingAccountId() {
        return actingAccountId;
    }

    /**
     * Allows SDK developers to change which instance of the Persephony API that the ConferencesRequester points to.
     *
     * @param newUrl The new URL to use in place of the default APIRequester.PERSY_URL
     */
    protected void setPersyUrl(String newUrl){ super.setPersyUrl(newUrl);}

    /**
     * Retrieve a list of logs associated with the {@code actingAccountId}.
     * This wraps na HTTP GET request to the Persephony API's
     * /Accounts/$accountId/Logs endpiont. This will retrieve all logs for the acting account.
     *
     * @return An in-language representation of Persephony's paginated list response. This will be a paginated list of logs as returned by the Persephony API.
     */
    public LogList get() throws PersyException {
        return new LogList(this.getCredentialAccountId(), this.getCredentialAuthToken(), this.GET(this.getPath()));
    }

    /**
     * Retrieve a list of logs associated with the {@code actingAccountId}.
     * This wraps an HTTP POST request to the Persephony API's
     * /Accounts/$accountId/Logs endpoint.
     *
     * @param filters an Object containing a number of possible ways to filter the logs returned by Persephony.
     *
     * @return An in-language representation of Persephony's paginated list response. This will be a paginated list of logs as returned by the Persephony API.
     */
    public LogList get(LogSearchFilters filters) throws PersyException {
        return new LogList(this.getCredentialAccountId(), this.getCredentialAuthToken(), this.POST(this.getPath(), gson.toJson(filters)));
    }
}
