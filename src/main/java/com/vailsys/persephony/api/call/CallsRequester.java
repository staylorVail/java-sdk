package com.vailsys.persephony.api.call;

import java.util.HashMap;

import com.vailsys.persephony.api.APIAccountRequester;
import com.vailsys.persephony.api.PersyException;
import com.vailsys.persephony.api.PersyJSONException;
import static com.vailsys.persephony.json.PersyGson.gson;

import com.google.gson.JsonIOException;
import com.google.gson.JsonSyntaxException;
import com.vailsys.persephony.log.LogWriter;

/**
 * This class represents the set of wrappers around the Persephony Calls API.
 * It provides methods to handle all the operations supported by the Persephony
 * Calls API.
 */
public class CallsRequester extends APIAccountRequester {
	private static final String pathHead = "Calls";
	/** The default path for the Calls endpoint. */
	private final String path;
	/** The accountId for the acting account. */
	private final String actingAccountId;

	/**
	 * Creates a CallsRequester with custom logging settings. For most SDK users CallsRequesters will be
	 * created automatically by the {@link com.vailsys.persephony.api.PersyClient}
	 * but is available for more advanced users who only require the features
	 * in this specific requester and not the rest of the features of the
	 * {@link com.vailsys.persephony.api.PersyClient}.
	 *
	 * @param credAccountId The accountId to use as authentication credentials
	 * in the HTTP Basic Auth header for requests made by this requester.
	 * @param credAuthToken The authToken to use as authentication credentials
	 * in the HTTP Basic Auth header for requests made by this requester.
	 * @param actingAccountId The accountId to act as. This can be the same as
	 * the {@code credAccountId} or the accountId of a subaccount of the {@code credAccountId}.
	 * @param writer The log writer to use.
	 */
	public CallsRequester(String credAccountId, String credAuthToken, String actingAccountId, LogWriter writer) throws PersyException {
		super(credAccountId, credAuthToken, writer);
		this.actingAccountId = actingAccountId;
		this.path = APIAccountRequester.constructPath(APIAccountRequester.rootPath, this.actingAccountId, pathHead);
	}

	/**
	 * Creates a CallsRequester. For most SDK users CallsRequesters will be
	 * created automatically by the {@link com.vailsys.persephony.api.PersyClient}
	 * but is available for more advanced users who only require the features
	 * in this specific requester and not the rest of the features of the
	 * {@link com.vailsys.persephony.api.PersyClient}.
	 *
	 * @param credAccountId The accountId to use as authentication credentials
	 * in the HTTP Basic Auth header for requests made by this requester.
	 * @param credAuthToken The authToken to use as authentication credentials
	 * in the HTTP Basic Auth header for requests made by this requester.
	 * @param actingAccountId The accountId to act as. This can be the same as
	 * the {@code credAccountId} or the accountId of a subaccount of the {@code credAccountId}.
	 */
	public CallsRequester(String credAccountId, String credAuthToken, String actingAccountId) throws PersyException {
		super(credAccountId, credAuthToken); 
		this.actingAccountId = actingAccountId;
		this.path = APIAccountRequester.constructPath(APIAccountRequester.rootPath, this.actingAccountId, pathHead);
	}

	/**
	 * Retrieve the {@code actingAccountId}.
	 *
	 * @return The {@code actingAccountId}
	 */
	public String getActingAccountId() {
		return this.actingAccountId;
	}

	/**
	 * Retrieve the {@code path} value generated by the CallsRequester. This is
	 * the URL path used in requests to Persephony.
	 *
	 * @return The {@code path}
	 */
	protected String getPath() {
		return this.path;
	}

	private String createCallPath(String callId) {
		return APIAccountRequester.constructPath(this.path, callId);
	}


	/**
	 * Allows SDK developers to change which instance of the Persephony API that the CallsRequester points to.
	 *
	 * @param newUrl The new URL to use in place of the default APIRequester.PERSY_URL
	 */
	protected void setPersyUrl(String newUrl) {
		super.setPersyUrl(newUrl);
	}

	/**
	 * Create a new call through the Persephony API using a registered
	 * Persephony application. This function wraps an HTTP POST request to the
	 * Persephony API's /Account/$accountId/Calls endpoint. This places a new
	 * call from the {@code actingAccountId} to the number provided from the
	 * number provided.
	 *
	 * @param to The number to call out to (DNIS). This can be any valid phone
	 * number formatted in E.164 format.
	 * @param from The number to call from (ANI). This must be a number
	 * purchase from Persephony or a verified phone number owned by the user.
	 * @param applicationId The {@code applicationId} for the registered
	 * Persephony application which should handle this call.
	 *
	 * @return The {@link com.vailsys.persephony.api.call.Call} object returned by
	 * Persephony that represents the call that was created.
	 */
	public Call create(String to, String from, String applicationId) throws PersyException {
		return this.create(to, from, applicationId, (CallOptions)null);
	}

	/**
	 * Create a new call through the Persephony API using a registered
	 * Persephony application. This function wraps an HTTP POST request to the
	 * Persephony API's /Account/$accountId/Calls endpoint. This places a new
	 * call from the {@code actingAccountId} to the number provided from the
	 * number provided.
	 *
	 * @param to The number to call out to (DNIS). This can be any valid phone
	 * number formatted in E.164 format.
	 * @param from The number to call from (ANI). This must be a number
	 * purchase from Persephony or a verified phone number owned by the user.
	 * @param applicationId The {@code applicationId} for the registered
	 * Persephony application which should handle this call.
	 * @param callOptions Optional arguments that can be provided when creating
	 * a call. See Persephony documentation for details.
	 *
	 * @return The {@link com.vailsys.persephony.api.call.Call} object returned by
	 * Persephony that represents the call that was created.
	 *
	 * @see com.vailsys.persephony.api.call.CallOptions
	 */
	public Call create(String to, String from, String applicationId, CallOptions callOptions) throws PersyException {
		try {
			return Call.fromJson(this.POST(this.path, new CreateCallRequest(to, from, applicationId, callOptions).toJson()));
		}
		catch (JsonIOException jioe) {
			throw new PersyJSONException(jioe);
		}
	}

	/**
	 * Create a new call through the Persephony API using an unregistered
	 * Persephony-compatible application. This function wraps an HTTP POST
	 * request to the Persephony API's /Account/$accountId/Calls endpoint. This
	 * places a new call from the {@code actingAccountId} to the number
	 * provided from the number provided.
	 *
	 * @param to The number to call out to (DNIS). This can be any valid phone
	 * number formatted in E.164 format.
	 * @param from The number to call from (ANI). This must be a number
	 * purchase from Persephony or a verified phone number owned by the user.
	 * @param callConnectUrl Like with a registered Persephony application,
	 * this is the URL that Persephony makes requests to when the call
	 * connects. See the {@code callConnectUrl} in the Persephony Application
	 * documentation.
	 * @param statusCallbackUrl The URL to which Persephony will report call
	 * status notifications. See the {@code statusCallbackUrl} in the
	 * Persephony Application documentation.
	 *
	 * @return The {@link com.vailsys.persephony.api.call.Call} object returned by
	 * Persephony that represents the call that was created.
	 */
	public Call create(String to, String from, String callConnectUrl, String statusCallbackUrl) throws PersyException {
		return this.create(to, from, callConnectUrl, statusCallbackUrl, null);
	}

	/**
	 * Create a new call through the Persephony API using an unregistered
	 * Persephony-compatible application. This function wraps an HTTP POST
	 * request to the Persephony API's /Account/$accountId/Calls endpoint. This
	 * places a new call from the {@code actingAccountId} to the number
	 * provided from the number provided.
	 *
	 * @param to The number to call out to (DNIS). This can be any valid phone
	 * number formatted in E.164 format.
	 * @param from The number to call from (ANI). This must be a number
	 * purchase from Persephony or a verified phone number owned by the user.
	 * @param callConnectUrl Like with a registered Persephony application,
	 * this is the URL that Persephony makes requests to when the call
	 * connects. See the {@code callConnectUrl} in the Persephony Application
	 * documentation.
	 * @param statusCallbackUrl The URL to which Persephony will report call
	 * status notifications. See the {@code statusCallbackUrl} in the
	 * Persephony Application documentation.
	 * @param callOptions Optional arguments that can be provided when creating
	 * a call. See Persephony documentation for details.
	 *
	 * @return The {@link com.vailsys.persephony.api.call.Call} object returned by
	 * Persephony that represents the call that was created.
	 *
	 * @see com.vailsys.persephony.api.call.CallOptions
	 */
	public Call create(String to, String from, String callConnectUrl, String statusCallbackUrl, CallOptions callOptions) throws PersyException {
		try {
			return Call.fromJson(this.POST(this.path, new CreateCallRequest(to, from, callConnectUrl, statusCallbackUrl, callOptions).toJson()));
		}
		catch (JsonIOException jioe) {
			throw new PersyJSONException(jioe);
		}
	}

	/**
	 * Retrieve a list of calls associated with the {@code actingAccountId}.
	 * This wraps a HTTP GET request to the Persephony API's
	 * /Accounts/$accountId/Calls endpoint. This will retrieve all calls for
	 * the acting account.
	 *
	 * @return An in-language representation of Persephony's paginated list
	 * response. This will be a paginated list of call instances as returned by
	 * the Persephony API. 
	 *
	 * @see com.vailsys.persephony.api.call.Call
	 */
	public CallList get() throws PersyException {
		return new CallList(this.getCredentialAccountId(), this.getCredentialAuthToken(), this.GET(this.path));
	}

	/**
	 * Retrieve a list of calls associated with the {@code actingAccountId}.
	 * This wraps a HTTP GET request to the Persephony API's
	 * /Accounts/$accountId/Calls endpoint. This will retrieve all calls for
	 * the acting account.
	 *
	 * @param filters An object containing a number of possible ways to filter
	 * the calls returned by Persephony.
	 *
	 * @return An in-language representation of Persephony's paginated list
	 * response. This will be a paginated list of call instances as returned by
	 * the Persephony API. 
	 *
	 * @see com.vailsys.persephony.api.call.CallsSearchFilters
	 */
	public CallList get(CallsSearchFilters filters) throws PersyException {
		HashMap<String,String> filtersMap;

		try {
			filtersMap = gson.fromJson(gson.toJson(filters), APIAccountRequester.GETMapType);
		} catch (JsonSyntaxException jse) {
			throw new PersyJSONException(jse);
		}

		return new CallList(this.getCredentialAccountId(), this.getCredentialAuthToken(), this.GET(this.path, filtersMap));
	}

	/**
	 * Retrieve a single call from Persephony.
	 *
	 * @param callId The {@code callId} of the desired call.
	 *
	 * @return The call matching the {@code callId} provided.
	 */
	public Call get(String callId) throws PersyException {
		return Call.fromJson(this.GET(this.createCallPath(callId)));
	}

	/**
	 * Update the existing call associated with the {@code callId}.
	 * This wraps an HTTP POST request to the Persephony API's
	 * /Accounts/$accountId/Calls/$callId endpoint.
	 *
	 * @param callId The {@code callId} of the desired call.
	 * @param options The {@code CallUpdateOptions} to change in the target call.
	 * @see com.vailsys.persephony.api.call.CallUpdateOptions
	 *
	 * @return The call matching the {@code callId} provided.
	 */
	public void update(String callId, CallsUpdateOptions updates) throws PersyException {
		this.POST(this.createCallPath(callId), gson.toJson(updates));
	}
}
